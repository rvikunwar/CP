Three Activities


Winter holidays are coming up. They are going to last for 𝑛 days.

During the holidays, Monocarp wants to try all of these activities exactly once with his friends:

go skiing;
watch a movie in a cinema;
play board games.
Monocarp knows that, on the 𝑖-th day, exactly 𝑎𝑖 friends will join him for skiing, 𝑏𝑖 friends will join him for a movie and 𝑐𝑖 friends will join him for board games.

Monocarp also knows that he can't try more than one activity in a single day.

Thus, he asks you to help him choose three distinct days 𝑥,𝑦,𝑧 in such a way that the total number of friends to join him for the activities (𝑎𝑥+𝑏𝑦+𝑐𝑧) is maximized.

Input
The first line contains a single integer 𝑡 (1≤𝑡≤104) — the number of testcases.

The first line of each testcase contains a single integer 𝑛 (3≤𝑛≤105) — the duration of the winter holidays in days.

The second line contains 𝑛 integers 𝑎1,𝑎2,…,𝑎𝑛 (1≤𝑎𝑖≤108) — the number of friends that will join Monocarp for skiing on the 𝑖-th day.

The third line contains 𝑛 integers 𝑏1,𝑏2,…,𝑏𝑛 (1≤𝑏𝑖≤108) — the number of friends that will join Monocarp for a movie on the 𝑖-th day.

The fourth line contains 𝑛 integers 𝑐1,𝑐2,…,𝑐𝑛 (1≤𝑐𝑖≤108) — the number of friends that will join Monocarp for board games on the 𝑖-th day.

The sum of 𝑛 over all testcases doesn't exceed 105.

Output
For each testcase, print a single integer — the maximum total number of friends that can join Monocarp for the activities on three distinct days.

INPUT
4
3
1 10 1
10 1 1
1 1 10
4
30 20 10 1
30 5 15 20
30 25 10 10
10
5 19 12 3 18 18 6 17 10 13
15 17 19 11 16 3 11 17 17 17
1 17 18 10 15 8 17 3 13 12
10
17 5 4 18 12 4 11 2 16 16
8 4 14 19 3 12 6 7 5 16
3 4 8 11 10 8 10 2 20 3

OUTPUT
30
75
55
56


#include <bits/stdc++.h>
using namespace std;


int main() {

    int t;
    cin>>t;

    while(t--){

        int n;
        cin>>n;

        vector<pair<int, int>> vc1;
        vector<pair<int, int>> vc2;
        vector<pair<int, int>> vc3;
        int val;

        for(int i=0; i<n; i++){
            cin>>val;
            vc1.push_back({val, i});
        }

        for(int i=0; i<n; i++){
            cin>>val;
            vc2.push_back({val, i});
        }

        for(int i=0; i<n; i++){
            cin>>val;
            vc3.push_back({val, i});
        }

        sort(vc1.begin(), vc1.end());
        sort(vc2.begin(), vc2.end());
        sort(vc3.begin(), vc3.end());

        int ans = 0;
        for(int i=1; i<=3; i++) {
            pair<int, int> pr1 = vc1[n-i];
            int index1 = pr1.second;
            for(int j=1; j<=3; j++) {
                pair<int, int> pr2 = vc2[n-j];
                int index2 = pr2.second;
                if(index2 == index1){
                    continue;
                }
                for(int k=1; k<=3; k++) {
                    pair<int, int> pr3 = vc3[n-k];
                    int index3 = pr3.second;
                    if(index3 == index2 || index3 == index1){
                        continue;
                    }
                    ans = max(ans, pr1.first + pr2.first + pr3.first);
                }  
            }   
        }

        cout<<ans<<endl;
    }
    return 0;
    
}

